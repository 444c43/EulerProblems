using System;
using System.Collections;
using System.Collections.Generic;
using InputLibrary;
using OutputLibrary;
using ValidationLibrary;

namespace EulerProblems
{
    public class Euler02 : EulerProblem
    {
        public Euler02():base()
        {
            base.Name = "Euler # 2";
            base.Title = "Even Fibonacci Numbers";
            base.Description = new List<string>{
                "Each new term in the Fibonacci sequence is generated by adding the previous two terms.",
                "By starting with 1 and 2, the first 10 terms will be:",
                "",
                "1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...",
                "",
                "By considering the terms in the Fibonacci sequence whose values do not exceed four million,",
                "find the sum of the even-valued terms."
            };
        }

        public override void EulerMain()
        {
            base.EulerMain();

            int[] IntResults = new int[]{
                CalculateIterative(base.InputValue),
                CalculateEfficient(base.InputValue - 1)};

            OutputService.ConvertToString(IntResults);
        }

        private int CalculateIterative(int maxRange)
        {
            int SumTotal = 0;
            int[] FibSet = new int[2] { 1, 2 };
            int Temp;
            while (LimitHasNotBeenReached(maxRange, FibSet[1]))
            {
                if (IsNumberEven(FibSet[1]))
                {
                    SumTotal += FibSet[1];
                }

                Temp = FibSet[1];
                FibSet[1] = FibSet[0]+ FibSet[1];
                FibSet[0] = Temp;
            }
            return SumTotal;
        }

        private bool LimitHasNotBeenReached(int maxRange, int current)
        {
            return current < maxRange;
        }

        private int CalculateEfficient(int maxRange)
        {
            int SeqNum = 2;
            int SeqSum = 0;

            while (SeqNum < maxRange)
            {
                SeqSum += SeqNum;
                SeqNum = GetValue(SeqNum);
            }
            return SeqSum;
        }

        private static int GetValue(int value)
        {
            return (int)Math.Round(value * 4.236068);
        } 

        private bool IsNumberEven(int fibOne)
        {
            return fibOne % 2 == 0;
        }
    }
}
